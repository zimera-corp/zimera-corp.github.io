<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Zimera Corporation</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Zimera Corporation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Mar 2024 06:45:51 +0700</lastBuildDate>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mamba as Conda Replacement</title>
      <link>/posts/00019/</link>
      <pubDate>Tue, 12 Mar 2024 06:45:51 +0700</pubDate>
      <guid>/posts/00019/</guid>
      <description>&lt;h2 id=&#34;python-and-its-package---environment-management&#34;&gt;Python and Its Package - Environment Management&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://python.org&#34;&gt;Python&lt;/a&gt; has always been the first choice for many programming tasks. This - of course - debatable since some problems exist in Python world, but let me tell you, in &lt;a href=&#34;https://spectrum.ieee.org/the-top-programming-languages-2023&#34;&gt;IEEE Spectrum top programming languages&lt;/a&gt;, Python is the winner from &lt;em&gt;IEEE Spectrum&lt;/em&gt; and &lt;em&gt;Trending&lt;/em&gt; category while SQL beats it in &lt;em&gt;Job&lt;/em&gt; category.&lt;/p&gt;&#xA;&lt;p&gt;As a long time developer who use Python since release 2.x (I insist on using Python for the whole curriculum in &lt;a href=&#34;https://www.utdi.ac.id&#34;&gt;Universitas Teknologi Digital Indonesia&lt;/a&gt; back in 2004), currently I use &lt;a href=&#34;https://docs.anaconda.com/free/miniconda/index.html&#34;&gt;Miniconda&lt;/a&gt; a lot (with &lt;code&gt;conda&lt;/code&gt; as its package and environment manager). Conda is a beautiful piece of software of course. I use it to manage my package and create mine. Using it, I can create an environment with specific Python version and also its own packages. However, when I use it for my software with many packages, It runs quite slow. So, I start to look for a drop in replacement. There goes &lt;a href=&#34;https://mamba.readthedocs.io/en/latest/&#34;&gt;Mamba&lt;/a&gt;!. It comes with faster and better at resolving package dependencies. Here&amp;rsquo;s the reason why Mamba is faster and better from &lt;a href=&#34;https://github.com/mamba-org/mamba&#34;&gt;Mamba Github&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Polyglot Programming dan GraalVM</title>
      <link>/posts/00005/</link>
      <pubDate>Mon, 23 Jan 2023 10:17:08 +0700</pubDate>
      <guid>/posts/00005/</guid>
      <description>&lt;p&gt;Pernahkah mendengar istilah polyglot programming? Istilah ini sudah menjadi istilah yang umum dan barangkali banyak didengar oleh para developer yang sehari-hari memang berkutat dengan bahasa pemrograman dan peranti pengembangan. Polyglot programming merupakan penggunaan lebih dari satu bahasa pemrograman untuk menyelesaikan suatu masalah pemrograman. Kategori polyglot programming antara lain adalah:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Penggunaan binding yang dibuat menggunakan suatu bahasa pemrograman tertentu (biasanya bahasa pemrograman aras sistem â€” atau aras rendah seperti C/C++, Assembly, Rust) ke suatu bahasa yang berada pada aras tinggi seperti Ruby, Python, dan lain-lain. Cara ini biasanya ditempuh untuk optimasi atau memang memerlukan function / procedure / library yang tidak ada di bahasa yang bersangkutan. Contoh: wxPython merupakan binding wxwidgets untuk Python untuk keperluan pembuatan aplikasi GUI.&lt;/li&gt;&#xA;&lt;li&gt;Fasilitas untuk mengeksekusi script / source code pada suatu bahasa tertentu. Contoh dari hal ini adalah Julia yang memungkinkan mengeksekusi source code Python sehingga memungkinkan akses terhadap banyak pustaka Python. Eksekusi ini biasanya dilakukan pada execution context yang berbeda.&lt;/li&gt;&#xA;&lt;li&gt;Penggunaan virtual machine bytecode yang bisa di-share oleh berbagai bahasa yang mendukung virtual machine tersebut. Contoh dari hal ini adalah JVM (Java Virtual Machine) yang secara default memerlukan bahasa pemrograman Java untuk menghasilkan bytecode .class. File-file bytecode tersebut bisa dibaca dan digunakan oleh bahasa lainnya yang dibuat pada JVM (misalnya Kotlin, Scala, Eta, Frege, dan lain-lain). Contoh lainnya ada pada CLR di dunia .NET yang bisa digunakan oleh berbagai bahasa seperti C#, F#, dan lain-lain. Jadi, dengan cara ini, bytecode merupakan tujuan akhir dan antar bahasa pemrograman bisa terjadi interoperabilitas karena memang berjalan pada VM yang sama dan bisa mengenali bytecode tersebut: source code harus dikompilasi terlebih dahulu untuk menghasilkan bytecode yang bisa memungkinkan interoperabilitas (sebagai contoh, Kotlin bisa mengakses berbagai file .jar di repo Maven yang dihasilkan oleh Java).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;GraalVM merupakan hasil riset dari Oracle (berbasis JDK) yang bertujuan untuk memungkinkan menggunakan berbagai bahasa dalam satu execution context di atas VM tanpa melalui proses kompilasi ke bytecode. Jadi, bisa saja menggunakan Python (salah satu bahasa yang didukung oleh GraalVM) dan source code Python kita mengakses pustaka standar di NodeJS. Lebih lanjut, hasil dari source code bisa dikompilasi menjadi native images yang mempunyai waktu eksekusi lebih cepat daripada bytecode VM. Menarik? mari kita coba.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
